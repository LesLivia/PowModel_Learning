<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>/**
** CHANNELS
**/

// Spindle speed ranges
const int N_W = 59; 

broadcast chan l, u, i_0, m[N_W];

/**
** DISTRIBUTIONS
**/ 

// Learned distributions
const double PI       = 3.1415926535897931159979;
const int N_D = **N_DISTR**
const int N_KER[N_D] = **KER_VECT**
const double SIGMA[N_D] = **H_VECT**

/**
E.G.,
const double MU_0[N_KER[0]] = {0.0, 5.0};
const double MU_1[N_KER[1]] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 500.0};
[...]
**/

const double eps = (1000* **EPS**) ;

**MU_VECT**

double normal_pdf(double mu, double sigma, double x) {
    return (1/(sigma*sqrt(2*PI)))*exp(-0.5*pow((x-mu)/sigma, 2));
}

double pdf(int d, double x) {
    int i;
    double res = 0.0;

    for(i=0; i&lt;N_KER[d]; i++) {
		/** E.G.,
        if(d==0) res = res + normal_pdf(MU_0[i], SIGMA[d], x);
        else if(d==1) res = res + normal_pdf(MU_1[i], SIGMA[d], x);
		[..]
		**/
		**KDE_SWITCH**
    }

    return res;
}

double random_kde(double a, double b, double c, int d) {
    double s_x, s_y;

    do {
        s_x = random(1.0)*(b-a)+a;
        s_y = random(1.0)*c;
    } while(s_y&gt;pdf(d, s_x));

    return s_x;
}

/**
** TRACE
**/ 
const int STOP = -1;
const int LOAD = -2;
const int UNLOAD = -3;

// Number of events
const int N_E = **N_EVENTS**
const int TRACE[N_E] = **TRACE**
const double TIMES[N_E] = **TIMES**
const int TAU = **TIME_BOUND**

/**
** UTILITY FUNCTIONS
**/

double max(double x,double y) {
    if(x&gt;=y) return x;
    else return y;
}
</declaration>
	<template>
		<name x="5" y="5">Program</name>
		<declaration>clock x;

double T = 0.0;
int next_i = -1;
int next_e = -1;

void get_next() {
    next_i++;
    if(next_i&gt;=N_E) return;
    next_e = TRACE[next_i];
    T = TIMES[next_i]-1;
}</declaration>
		<location id="id0" x="212" y="85">
			<name x="153" y="34">working</name>
			<label kind="invariant" x="170" y="51">x&lt;=T</label>
		</location>
		<location id="id1" x="0" y="85">
			<name x="-10" y="51">_init_</name>
			<committed/>
		</location>
		<location id="id2" x="408" y="85">
			<name x="398" y="51">new_e</name>
			<committed/>
		</location>
		<location id="id3" x="586" y="85">
			<name x="576" y="51">COMPLETE</name>
		</location>
		<init ref="id1"/>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="450" y="93">next_i&gt;=N_E</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="guard" x="212" y="153">next_i&lt;N_E &amp;&amp; next_e!=STOP &amp;&amp; next_e!=LOAD &amp;&amp; next_e!=UNLOAD</label>
			<label kind="synchronisation" x="272" y="170">m[next_e]!</label>
			<label kind="assignment" x="255" y="187">x=0, get_next()</label>
			<nail x="306" y="153"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="guard" x="221" y="-8">next_i&lt;N_E &amp;&amp; next_e==STOP</label>
			<label kind="synchronisation" x="297" y="-25">i_0!</label>
			<label kind="assignment" x="263" y="-42">x=0, get_next()</label>
			<nail x="306" y="17"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="guard" x="221" y="-8">next_i&lt;N_E &amp;&amp; next_e==LOAD</label>
			<label kind="synchronisation" x="297" y="-25">l!</label>
			<label kind="assignment" x="263" y="-42">x=0, get_next()</label>
			<nail x="306" y="17"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="guard" x="221" y="-8">next_i&lt;N_E &amp;&amp; next_e==UNLOAD</label>
			<label kind="synchronisation" x="297" y="-25">u!</label>
			<label kind="assignment" x="263" y="-42">x=0, get_next()</label>
			<nail x="306" y="17"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="guard" x="289" y="59">x&gt;=T</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="assignment" x="42" y="85">x=0, get_next()</label>
		</transition>
	</template>
**MACHINE**
<system>
p_1 = Program();
m_1 = Machine();

system p_1, m_1;
</system>
<queries>
		<query>
			<formula>simulate[&lt;=TAU]{m_1.w, m_1.P}</formula>
			<comment></comment>
		</query>
</queries>
</nta>
